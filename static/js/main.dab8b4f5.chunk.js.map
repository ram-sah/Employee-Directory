{"version":3,"sources":["components/Header.js","utils/API.js","components/SearchBox.js","components/Gender.js","components/TableBody.js","components/Headings.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","axios","get","SearchBox","props","console","log","value","type","placeholder","aria-label","onChange","e","handleInputChange","onClick","reset","Gender","gender","isMale","icon","faMale","faFemale","TableBody","employees","map","emp","src","picture","medium","alt","name","first","last","phone","href","email","date","dateArray","split","year","join","formatDate","dob","Headings","id","renderSortedEmployees","Search","state","search","results","filteredResults","order","event","target","setState","filter","item","toLowerCase","indexOf","context","sort","a","b","compareFirst","item1","nameA","nameB","toUpperCase","comparison","API","then","res","data","catch","err","this","handleFormSubmit","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sUAGqBA,G,6KAEjB,OACE,yBAAKC,UAAU,UACb,kDACA,uH,GAL4BC,c,wBCFrB,EAEH,WACR,OAAOC,IAAMC,IAAI,iD,MCsBNC,MAxBf,SAAmBC,GAEjB,OADAC,QAAQC,IAAIF,GAEV,yBAAKL,UAAU,aACb,4BAAI,0DACJ,0BAAMA,UAAU,eACd,2BACEQ,MAAOH,EAAMG,MACbR,UAAU,uBACVS,KAAK,OACLC,YAAY,SACZC,aAAW,SACXC,SAAU,SAAAC,GAAC,OAAER,EAAMS,kBAAkBD,MAPzC,OAWG,4BAAQb,UAAU,mBAAmBe,QAASV,EAAMW,OAApD,UAEH,yBAAKhB,UAAU,SACf,4BAAI,6D,qBChBK,SAASiB,EAAOC,GAC7B,IAAIC,GAAS,EAIb,MAHsB,SAAlBD,EAAOA,SACTC,GAAS,GAGb,oCACQA,EACE,kBAAC,IAAD,CAAiBC,KAAMC,IAAQrB,UAAU,SACzC,kBAAC,IAAD,CAAiBoB,KAAME,IAAUtB,UAAU,YCZtC,SAASuB,EAAT,GAAmC,IAAdC,EAAa,EAAbA,UAWhC,OACI,+BACKA,EAAUC,KAAI,SAAAC,GAAG,OACd,4BACI,gCAAM,yBAAKC,IAAKD,EAAIE,QAAQC,OAAQ7B,UAAU,iDAC1C8B,IAAI,mBACR,4BAAMJ,EAAIK,KAAKC,OACf,4BAAMN,EAAIK,KAAKE,MACf,4BAAMP,EAAIQ,OACV,4BAAK,uBAAGC,KAAM,UAAYT,EAAIU,OAAQV,EAAIU,QAC1C,4BAnBhB,SAAoBC,GAChB,IAAMC,EAAYD,EAAKE,MAAM,KACvBC,EAAOF,EAAU,GAKvB,MADsB,CAHRA,EAAU,GACPA,EAAU,GAAGC,MAAM,KACf,GACcC,GAAMC,KAAK,KAa5BC,CAAWhB,EAAIiB,IAAIN,OACzB,4BAAMX,EAAIR,OAAV,MAAoB,kBAACD,EAAD,CAAQC,OAAQQ,EAAIR,eCvB7C,SAAS0B,EAASvC,GAC7B,OACI,+BACI,4BACI,4BAAK,4BAAQL,UAAU,MAAlB,SAAqC,8BAC1C,4BAAK,4BAAQ6C,GAAG,YAAY7C,UAAU,KAAKe,QAASV,EAAMyC,uBAArD,cAA+F,8BACpG,4BAAK,4BAAQD,GAAG,WAAW7C,UAAU,KAAKe,QAASV,EAAMyC,uBAApD,aAA6F,8BAClG,4BAAK,4BAAQD,GAAG,QAAQ7C,UAAU,KAAKe,QAASV,EAAMyC,uBAAjD,SAAsF,8BAC3F,4BAAK,4BAAQD,GAAG,QAAQ7C,UAAU,KAAKe,QAASV,EAAMyC,uBAAjD,SAAsF,8BAC3F,4BAAK,4BAAQD,GAAG,MAAM7C,UAAU,KAAKe,QAASV,EAAMyC,uBAA/C,OAAkF,8BACvF,4BAAK,4BAAQ9C,UAAU,MAAlB,UAAsC,gC,IC6F5C+C,E,4MAlGbC,MAAQ,CACNC,OAAQ,GACRC,QAAS,GACTC,gBAAiB,GACjBC,OAAO,G,EAWTtC,kBAAoB,SAAAuC,GAAS,IAGnB7C,EAAU6C,EAAMC,OAAhB9C,MACR,EAAK+C,SAAS,CACZN,OAAQzC,EAAO2C,gBAAiB,EAAKH,MAAME,QAAQM,QACjD,SAAAC,GAAI,OAAoE,IAAhEA,EAAK1B,KAAKC,MAAM0B,cAAcC,QAAQnD,EAAMkD,qB,EAI1DZ,sBAAwB,SAAAO,GACtB/C,QAAQC,IAAI8C,EAAMC,OAAOT,IACzB,IAAMe,EAAO,eAKb,EAAKL,SAAS,CAAEJ,gBAAiB,EAAKH,MAAMG,gBAAgBU,MAJ5D,SAAkBC,EAAGC,GACnB,OAAOH,EAAQI,aAAaF,EAAGC,EAAGV,EAAMC,OAAOT,OAG2BO,OAAQ,EAAKJ,MAAMI,S,EAGjGY,aAAe,SAACF,EAAGC,EAAGE,GAAyB,IACzCC,EACAC,EAEU,cAAVF,IACFC,EAAQJ,EAAE/B,KAAKC,MAAMoC,cACrBD,EAAQJ,EAAEhC,KAAKC,MAAMoC,eAET,aAAVH,IACFC,EAAQJ,EAAE/B,KAAKE,KAAKmC,cACpBD,EAAQJ,EAAEhC,KAAKE,KAAKmC,eAER,UAAVH,IACFC,EAAQJ,EAAE5B,MAAMkC,cAChBD,EAAQJ,EAAE7B,MAAMkC,eAEJ,UAAVH,IACFC,EAAQJ,EAAE1B,MAAMgC,cAChBD,EAAQJ,EAAE3B,MAAMgC,eAEJ,QAAVH,IACFC,EAAQJ,EAAEnB,IAAIN,KACd8B,EAAQJ,EAAEpB,IAAIN,MAIhB,IAAIgC,EAAa,EAejB,OAdI,EAAKrB,MAAMI,MACTc,EAAQC,EACVE,EAAa,EACJH,EAAQC,IACjBE,GAAc,GAIZH,EAAQC,EACVE,GAAc,EACLH,EAAQC,IACjBE,EAAa,GAGVA,G,kEArEY,IAAD,OAClBC,IACGC,MAAK,SAAAC,GAAG,OAAI,EAAKjB,SAAS,CACzBL,QAASsB,EAAIC,KAAKvB,QAClBC,gBAAiBqB,EAAIC,KAAKvB,aAE3BwB,OAAM,SAAAC,GAAG,OAAIrE,QAAQC,IAAIoE,Q,+BAmE5B,OACE,6BACE,kBAAC,EAAD,CACEnD,UAAWoD,KAAK5B,MAAME,QACtB2B,iBAAkBD,KAAKC,iBACvB/D,kBAAmB8D,KAAK9D,kBACxBN,MAAOoE,KAAK5B,MAAMC,SAEpB,2BAAOjD,UAAU,uBACf,kBAAC4C,EAAD,CACEE,sBAAuB8B,KAAK9B,wBAE9B,kBAACvB,EAAD,CAAWC,UAAWoD,KAAK5B,MAAMG,wB,GA7FtBlD,aCYN6E,MAZf,WAEE,OACE,yBAAK9E,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,Q,MCCc+E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACLxF,QAAQwF,MAAMA,EAAMC,c","file":"static/js/main.dab8b4f5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"../styles/Header.css\";\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <h1>Employee Directory</h1>\n        <p>Click on Headers to filter by heading or use the search box to narrow your results.</p>\n      </div>\n    )\n  }\n}\n","import axios from \"axios\";\r\nexport default {\r\n  // Gets all users\r\n  getUsers: function () {\r\n    return axios.get(\"https://randomuser.me/api/?results=50&nat=us\")\r\n     \r\n  }\r\n};","import React from \"react\";\nimport \"../styles/SearchBox.css\";\nfunction SearchBox(props) {\n  console.log(props)\n  return (\n    <div className=\"searchbox\">\n      <h5><strong>Search by First Name:</strong></h5>\n      <form className=\"form-inline\">\n        <input\n          value={props.value}\n          className=\"form-control mr-sm-2\"\n          type=\"text\"\n          placeholder=\"Search\"\n          aria-label=\"Search\"\n          onChange={e=>props.handleInputChange(e)}\n        />      \n        {/* <button className=\"btn my-2 my-sm-2\" onClick={props.submit}>Search</button> */}\n        &nbsp;\n         <button className=\"btn my-2 my-sm-2\" onClick={props.reset}>Reset</button>\n      </form>\n      <div className=\"space\">\n      <h5><strong>Click Headers to Sort</strong></h5>\n      </div>\n    </div>\n  );\n}\nexport default SearchBox;\n","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMale, faFemale } from '@fortawesome/free-solid-svg-icons'\nimport \"../styles/Style.css\"\n\nexport default function Gender(gender) {\n  let isMale = false;\n  if (gender.gender === \"male\") {\n    isMale = true;\n  }\n  return (\n<>\n      { isMale\n        ? <FontAwesomeIcon icon={faMale} className=\"male\" />\n        : <FontAwesomeIcon icon={faFemale} className=\"female\" />\n      }\n   </>\n  )\n}","import React from \"react\";\nimport Gender from './Gender';\nexport default function TableBody({ employees }) {\n    // convert date formate mm-dd-yyy\n    function formatDate(date) {\n        const dateArray = date.split(\"-\");\n        const year = dateArray[0];\n        const month = dateArray[1];\n        const dayArray = dateArray[2].split(\"T\");\n        const day = dayArray[0];\n        const formattedDate = [month, day, year].join(\"-\");\n        return formattedDate;\n    }\n    return (\n        <tbody>\n            {employees.map(emp => (\n                <tr>\n                    <td > <img src={emp.picture.medium} className='rounded-circle border border-success ml-2 mt-2'\n                        alt=\"employeePhoto\"></img></td>\n                    <th >{emp.name.first}</th>\n                    <th >{emp.name.last}</th>\n                    <td >{emp.phone}</td>\n                    <td ><a href={\"mailto:\" + emp.email}>{emp.email}</a></td>\n                    <td >{formatDate(emp.dob.date)}</td>\n                    <td >{emp.gender}   <Gender gender={emp.gender} /></td>\n                </tr>\n            ))\n            }\n        </tbody>\n    )\n}","import React from \"react\";\nexport default function Headings(props) {\n    return (\n        <thead>\n            <tr>\n                <th ><button className=\"bn\">IMAGE</button><hr /></th>\n                <th ><button id=\"firstName\" className=\"bn\" onClick={props.renderSortedEmployees}>FIRST-NAME</button><hr /></th>\n                <th ><button id=\"lastName\" className=\"bn\" onClick={props.renderSortedEmployees}>LAST-NAME</button><hr /></th>\n                <th ><button id=\"phone\" className=\"bn\" onClick={props.renderSortedEmployees}>PHONE</button><hr /></th>\n                <th ><button id=\"email\" className=\"bn\" onClick={props.renderSortedEmployees}>EMAIL</button><hr /></th>\n                <th ><button id=\"dob\" className=\"bn\" onClick={props.renderSortedEmployees}>DOB</button><hr /></th>\n                <th ><button className=\"bn\">GENDER</button><hr /></th>\n            </tr>\n        </thead>\n    )\n}","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport SearchBox from \"../components/SearchBox\";\nimport TableBody from \"../components/TableBody\";\nimport Headings from \"../components/Headings\";\nclass Search extends Component {\n  state = {\n    search: \"\",\n    results: [],\n    filteredResults: [],\n    order: false\n  };\n  // When the component mounts, get a list of all available base employee and update this.state.employee\n  componentDidMount() {\n    API.getUsers()\n      .then(res => this.setState({\n        results: res.data.results,\n        filteredResults: res.data.results\n      }))\n      .catch(err => console.log(err));\n  };\n  handleInputChange = event => {\n    // console.log(event.target.value)\n    // console.log(event.target.name)\n    const { value } = event.target\n    this.setState({\n      search: value, filteredResults: this.state.results.filter(\n        item => item.name.first.toLowerCase().indexOf(value.toLowerCase()) !== -1)\n    })\n  };\n  //\n  renderSortedEmployees = event => {\n    console.log(event.target.id);\n    const context = this\n    function compareF(a, b) {\n      return context.compareFirst(a, b, event.target.id)\n    }\n    // found at https://www.sitepoint.com/sort-an-array-of-objects-in-javascript/\n    this.setState({ filteredResults: this.state.filteredResults.sort(compareF), order: !this.state.order })\n  };\n  //Comparing all headings \n  compareFirst = (a, b, item1, item2 = null) => {\n    let nameA;\n    let nameB;\n    // console.log(item1)\n    if (item1 === \"firstName\") {\n      nameA = a.name.first.toUpperCase();\n      nameB = b.name.first.toUpperCase();\n    }\n    if (item1 === \"lastName\") {\n      nameA = a.name.last.toUpperCase();\n      nameB = b.name.last.toUpperCase();\n    }\n    if (item1 === \"phone\") {\n      nameA = a.phone.toUpperCase();\n      nameB = b.phone.toUpperCase();\n    }\n    if (item1 === \"email\") {\n      nameA = a.email.toUpperCase();\n      nameB = b.email.toUpperCase();\n    }\n    if (item1 === \"dob\") {\n      nameA = a.dob.date;\n      nameB = b.dob.date;\n    };\n\n    // console.log(a, b);\n    let comparison = 0;\n    if (this.state.order) {\n      if (nameA > nameB) {\n        comparison = 1;\n      } else if (nameA < nameB) {\n        comparison = -1;\n      };\n    }\n    else {\n      if (nameA > nameB) {\n        comparison = -1;\n      } else if (nameA < nameB) {\n        comparison = 1;\n      };\n    }\n    return comparison;\n  };\n  //rendering the pages  \n  render() {\n    return (\n      <div>\n        <SearchBox\n          employees={this.state.results}\n          handleFormSubmit={this.handleFormSubmit}\n          handleInputChange={this.handleInputChange}\n          value={this.state.search}>\n        </SearchBox>\n        <table className=\"table table-striped\">\n          <Headings\n            renderSortedEmployees={this.renderSortedEmployees}\n          />\n          <TableBody employees={this.state.filteredResults} />\n        </table>\n      </div>\n    );\n  }\n}\nexport default Search;","import React from \"react\";\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Search from \"./components/Search\";\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Header />\n\n      <Search />     \n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}