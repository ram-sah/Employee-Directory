{"version":3,"sources":["components/Header.js","components/SearchBox.js","components/Headings.js","components/Gender.js","components/TableBody.js","utils/API.js","components/SearchResults.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","SearchBox","props","console","log","onSubmit","e","preventDefault","handleFormSubmit","value","type","placeholder","aria-label","onChange","handleInputChange","id","onClick","reset","Headings","Gender","gender","isMale","icon","faMale","faFemale","TableBody","employees","map","emp","src","picture","medium","alt","name","first","last","phone","email","dob","date","axios","get","SearchResults","Search","state","search","results","filteredResults","event","target","setState","filter","item","toLowerCase","indexOf","updatedResults","x","includes","login","username","location","city","renderSortedEmployees","sort","a","b","nameA","toUpperCase","nameB","comparison","API","then","res","data","catch","err","this","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.120af395.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport \"../styles/Header.css\";\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <div className=\"header\">\n        <h1>Employee Directory</h1>\n        <p>Click on carrots to filter by heading or use the search box to narrow your results.</p>\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport \"../styles/SearchBox.css\";\nfunction SearchBox(props) {\n  console.log(props)\n  return (\n    <div className=\"searchbox\">\n      <p><strong>Search by name:</strong></p>\n      <form className=\"form-inline\" onSubmit = {e=> {e.preventDefault();props.handleFormSubmit(e)}} >\n        <input\n          value={props.value}\n          className=\"form-control mr-sm-2\"\n          type=\"text\"\n          placeholder=\"Search\"\n          aria-label=\"Search\"\n          onChange={e=>props.handleInputChange(e)}\n        />\n        <datalist id=\"\">\n        {console.log(props)}\n          {/* {props.employees.map(name => (\n            <option value={name} key={name} />\n          ))} */}\n        </datalist>\n\n        <button className=\"btn my-2 my-sm-0\" onClick={props.reset}>Search</button>\n        &nbsp;\n         <button className=\"btn my-2 my-sm-0\" onClick={props.reset}>Reset</button>\n      </form>\n      {/* <form onSubmit = {(e)=> {e.preventDefault()}\n      }>\n      <button className=\"btn my-2 my-sm-0\">\n          Search\n        </button>\n        </form> */}\n    </div>\n  );\n}\nexport default SearchBox;\n","import React from \"react\";\nexport default function Headings() {\n    return (\n        <thead>\n            <tr>\n                <th >IMAGE<hr/></th>\n                <th >FIRST-NAME<hr/></th>\n                <th >LAST-NAME<hr/></th>\n                <th >PHONE<hr/></th>\n                <th >EMAIL<hr/></th>\n                <th >DOB<hr/></th>   \n                <th >GENDER<hr/></th>           \n            </tr>\n        </thead>\n    )\n}","import React from \"react\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faMale, faFemale } from '@fortawesome/free-solid-svg-icons'\nimport \"../styles/Style.css\"\n\nexport default function Gender(gender) {\n  let isMale = false;\n  if (gender.gender === \"male\") {\n    isMale = true;\n  }\n  return (\n<>\n      { isMale\n        ? <FontAwesomeIcon icon={faMale} className=\"male\" />\n        : <FontAwesomeIcon icon={faFemale} className=\"female\" />\n      }\n   </>\n  )\n}","import React from \"react\";\nimport Gender from './Gender';\nexport default function TableBody({ employees }) {\n    return (\n        <tbody>\n            {employees.map(emp => (\n                <tr>\n                    <td > <img src={emp.picture.medium} alt=\"employeePhoto\"></img></td>\n                    <td >{emp.name.first}</td>\n                    <td >{emp.name.last}</td>\n                    <td >{emp.phone}</td>\n                    <td >{emp.email}</td>\n                    <td >{emp.dob.date}</td>\n                    <td >{emp.gender}   <Gender gender={emp.gender}/></td>\n                </tr>\n            ))\n            }\n        </tbody>\n    )\n}","import axios from \"axios\";\r\nexport default {\r\n  // Gets all users\r\n  getUsers: function () {\r\n    return axios.get(\"https://randomuser.me/api/?results=20&nat=us\")\r\n     \r\n  }\r\n};","import React from \"react\";\n// import \"../styles\";\n\nfunction SearchResults(props) {\n  return (\n    <ul className=\"list-group search-results\">\n      {props.results.map(result => (\n        <li key={result} className=\"list-group-item\">\n          <img alt=\"Employee\" src={result} className=\"img-fluid\" />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default SearchResults;\n","import React, { Component } from \"react\";\n import API from \"../utils/API\";\n\nimport SearchBox from \"../components/SearchBox\";\nimport SearchResults from \"../components/SearchResults\";\nimport TableBody from \"../components/TableBody\";\nimport Headings from \"../components/Headings\";\n\nclass Search extends Component {\n  state = {\n    search: \"\",\n    results: [],\n    filteredResults: []\n  };\n\n  // When the component mounts, get a list of all available base employee and update this.state.employee\n  componentDidMount() {\n    API.getUsers()\n      .then(res => this.setState({ \n      results: res.data.results,\n      filteredResults: res.data.results \n      }))\n      .catch(err => console.log(err));\n  };\n\n  handleInputChange = event => {\n    console.log(event.target.value)\n    console.log(event.target.name)\n    const { name, value } = event.target\n    \n    this.setState( {search: value, filteredResults: this.state.results.filter(item=>item.name.first.toLowerCase().indexOf(value.toLowerCase()) !== -1)})\n\n  };\n\n  handleFormSubmit = event => {\n    event.preventDefault();\n\n    this.setState(() => {\n        const updatedResults = this.state.filteredResults.filter(x => \n            x.name.first.includes(this.state.search) || \n            x.name.last.includes(this.state.search) ||\n            x.login.username.includes(this.state.search) || \n            x.location.state.includes(this.state.search) ||\n            x.location.city.includes(this.state.search))\n        if (!this.state.search) {\n            return { filteredResults: this.state.results }\n        } else {\n            return { filteredResults: updatedResults }\n        };\n    });\n\n    \n};\n\nrenderSortedEmployees = event => {\n  event.preventDefault();\n\n  // found at https://www.sitepoint.com/sort-an-array-of-objects-in-javascript/\n  function compare(a, b) {\n      const nameA = a.name.last.toUpperCase();\n      const nameB = b.name.last.toUpperCase();\n\n      let comparison = 0;\n      if (nameA > nameB) {\n          comparison = 1;\n      } else if (nameA < nameB) {\n          comparison = -1;\n      };\n      return comparison;\n  };\n\n  return this.setState({ filteredResults: this.state.filteredResults.sort(compare) })\n};\n\n  render() {\n    return (\n      <div>\n        <SearchBox  \n          employees = { this.state.results }\n            handleFormSubmit={this.handleFormSubmit}\n            handleInputChange={this.handleInputChange}\n            value={this.state.search}>\n          <h1 className=\"text-center\">Search By Name!</h1>\n        </SearchBox> \n        {/* <Nav />\n        <table className=\"table table-striped\"> */}\n        <table>\n          <Headings />\n        <TableBody employees={this.state.filteredResults} /> \n        </table>      \n      </div>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from \"react\";\nimport './App.css';\n// import API from \"./utils/API\";\nimport Header from \"./components/Header\";\nimport Nav from \"./components/Nav\";\nimport Headings from \"./components/Headings\";\nimport TableBody from \"./components/TableBody\";\nimport Search from \"./components/Search\";\n// import SearchBox from \"./components/SearchBox\";\n\nfunction App() {\n  // state = {\n  //   employees: [],\n  // };\n  // componentDidMount() {\n  //   API.getUsers()\n  //     .then(res => {\n  //       console.log(res.data.results)\n  //       this.setState({ employees: res.data.results })\n  //     })\n  //     .catch(err => console.log(err));\n  // }\n  // handleInputChange = event => {\n  //   this.setState({ search: event.target.value });\n  // };\n\n    return (\n      <div className=\"App\">\n        <Header />\n        \n      \n          <Search />\n          {/* <SearchBox employees={this.state.employees}/> */}\n        \n      </div>\n    );\n  }\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}